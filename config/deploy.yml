# Name of your application. Used to uniquely configure containers.
service: richard_bday

# Name of the container image.
image: zachjustice/richard_bday

# Deploy to these servers.
servers:
  web:
    - 174.138.60.116
  job:
    hosts:
      - 174.138.60.116
    cmd: bin/jobs
  # cable:
  #   hosts:
  #     - 174.138.60.116
  #   cmd: bin/cable
  #   options:
  #     publish: "28080:28080"

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: blanksies.zachjustice.dev

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: ghcr.io
  username: zachjustice

  # Always use an access token rather than real password when possible.
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
  clear:
    HOST: blanksies.zachjustice.dev
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use richard_bday-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "richard_bday_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.4.1
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   traefik:
#     service: traefik
#     image: traefik:v3.1
#     roles:
#       - web
#     options:
#       publish:
#         - 80:80
#         - 443:443
#         - 28080:28080
#     cmd: "--providers.docker --providers.docker.exposedByDefault=false --entryPoints.cable.address=:28080 --log.level=INFO"
#     volumes:
#       - "/var/run/docker.sock:/var/run/docker.sock"
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data

labels:
  traefik.enable: true
  # traefik.tcp.routers.epmd.rule: "ClientIP(`0.0.0.0/0`)"
  # traefik.tcp.routers.epmd.priority: 5
  # traefik.tcp.routers.epmd.entryPoints: epmd
  # traefik.tcp.routers.epmd.service: epmd
  # traefik.tcp.services.epmd.loadBalancer.server.port: 4369
  # traefik.tcp.routers.beam.rule: "ClientIP(`0.0.0.0/0`)"
  # traefik.tcp.routers.beam.priority: 5
  # traefik.tcp.routers.beam.entryPoints: beam
  # traefik.tcp.routers.beam.service: beam
  # traefik.tcp.services.beam.loadBalancer.server.port: 9100
  # traefik.http.services.kamal_proxy.loadbalancer.server.scheme: http
  #traefik.http.services.kamal_proxy.loadbalancer.server.port: 28080 # 8000
  # traefik.http.routers.kamal_proxy.rule: PathPrefix\(\`/\`\)
  # traefik.http.routers.kamal_proxy.rule: Host(`blanksies.zachjustice.dev`)
  # traefik.http.routers.kamal_proxy.service: web
  # traefik.http.routers.kamal_proxy.tls: true
